import asyncio
import feedparser
import json
import os
import re
import aiohttp
from datetime import datetime, time
from telegram import Bot
from telegram.error import TelegramError
from deep_translator import GoogleTranslator

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8216129159:AAEPydIO3dU-tg4YUrP12-B3CoemTcA2ve8"
CHANNEL_ID = "@tunespots"

FETCH_INTERVAL = 3 * 3600   # –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –ø–∞—Ä—Å–∏–º RSS
POST_INTERVAL = 120        # –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç –ø–æ—Å—Ç–∏–º
WORK_HOURS = (8, 20)        # –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å 08:00 –¥–æ 20:00

NEWS_FILE = "news_queue.json"
POSTED_FILE = "posted.json"

# üéß RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏


RSS_FEEDS = [
    # üåç –ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –∫—Ä—É–ø–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã
    "https://www.billboard.com/feed/",
    "https://pitchfork.com/feed/",
    "https://www.nme.com/news/music/feed",
    "https://www.rollingstone.com/music/music-news/feed/",
    "https://musicfeeds.com.au/feed/",
    "https://consequence.net/feed/",
    "https://www.stereogum.com/feed/",
    "https://www.spin.com/feed/",
    "https://uproxx.com/music/feed/",
    "https://www.clashmusic.com/feed/",
    "https://www.thefader.com/feed/rss",
    "https://www.dancingastronaut.com/feed/",
    "https://djmag.com/rss.xml",
    "https://mixmag.net/rss.xml",
    "https://www.thissongissick.com/feed/",
    "https://www.indieisnotagenre.com/feed/",
    "https://www.hypebot.com/feed/",
    "https://www.xxlmag.com/feed/",
    "https://hiphopdx.com/feed",
    "https://metalinjection.net/feed",
    "https://metalhammer.com/feed",
    "https://popjustice.com/feed/",

    # üá∑üá∫ –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –°–ú–ò
    "https://the-flow.ru/rss",
    "https://rockcult.ru/feed/",
    "https://daily.afisha.ru/rss/news/",
    "https://musify.club/news/rss",
    "https://rumusicnews.ru/feed/",
    "https://rusradio.ru/news/rss.xml",
    "https://newslab.ru/rss/music",
    "https://musicboxgroup.ru/feed",
    "https://www.zvuki.ru/rss/news.xml",

    # üéõ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ / –∂–∞–Ω—Ä–æ–≤—ã–µ
    "https://edm.com/.rss/full/",
    "https://routenote.com/blog/feed/",
    "https://www.allmusic.com/rss",
    "https://soundcloudnews.wordpress.com/feed/",
    "https://musictech.com/feed/",
    "https://musicbusinessworldwide.com/feed/",
]


# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

def load_json(filename, default=None):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return default or []


def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


async def translate_text(text, dest_lang="ru"):
    try:
        return GoogleTranslator(source="auto", target=dest_lang).translate(text)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text


# ---------- –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–∞ –∏ —Ç—Ä–µ–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ ----------

async def get_yandex_track(artist_name: str):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫"""
    search_url = f"https://music.yandex.ru/search?text={artist_name}"
    api_url = f"https://music.yandex.ru/api/search?text={artist_name}&type=artist"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url, headers={"User-Agent": "Mozilla/5.0"}) as resp:
                if resp.status != 200:
                    return None
                data = await resp.json()

                if not data.get("artists", {}).get("results"):
                    return None

                artist_id = data["artists"]["results"][0]["id"]
                artist_name = data["artists"]["results"][0]["name"]

                # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫ –∞—Ä—Ç–∏—Å—Ç–∞
                artist_tracks_url = f"https://music.yandex.ru/artist/{artist_id}/tracks"
                return f"https://music.yandex.ru/artist/{artist_id}"

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä—Ç–∏—Å—Ç–∞ {artist_name}: {e}")
        return None


def extract_possible_artist(title: str):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    # –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏, –∫–∞–≤—ã—á–∫–∏, –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    clean_title = re.sub(r"[\(\)\[\]\"‚Äú‚Äù‚Äò‚Äô]", "", title)

    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 2-3 —Å–ª–æ–≤–∞ (–≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —á–∞—Å—Ç–æ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –∏–¥—ë—Ç –≤ –Ω–∞—á–∞–ª–µ)
    words = clean_title.split()
    if len(words) <= 3:
        return clean_title
    return " ".join(words[:3])


# ---------- –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è ----------

async def fetch_news():
    posted_titles = set(load_json(POSTED_FILE, []))
    news_queue = load_json(NEWS_FILE, [])
    new_items = []

    for feed_url in RSS_FEEDS:
        feed = feedparser.parse(feed_url)
        for entry in feed.entries[:10]:
            title = entry.title
            link = entry.link
            summary = getattr(entry, "summary", "")

            if title not in posted_titles and all(n["title"] != title for n in news_queue):
                new_items.append({
                    "title": title,
                    "summary": summary,
                    "link": link,
                    "source": feed_url
                })
                posted_titles.add(title)

    if new_items:
        news_queue.extend(new_items)
        save_json(NEWS_FILE, news_queue)
        save_json(POSTED_FILE, list(posted_titles))
        print(f"üì∞ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_items)} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
    else:
        print("üò¥ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")


async def post_next_news(bot: Bot):
    now = datetime.now().time()
    if not (time(WORK_HOURS[0], 0) <= now <= time(WORK_HOURS[1], 0)):
        print(f"üåô –°–µ–π—á–∞—Å {now.strftime('%H:%M')}, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ 08:00.")
        return

    news_queue = load_json(NEWS_FILE, [])
    if not news_queue:
        print("‚è≥ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –∂–¥—ë–º –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
        return

    news = news_queue.pop(0)
    save_json(NEWS_FILE, news_queue)

    translated_title = await translate_text(news["title"])
    translated_summary = await translate_text(news["summary"])

    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É
    possible_artist = extract_possible_artist(news["title"])
    yandex_link = await get_yandex_track(possible_artist)

    message = (
        f"üéµ **{translated_title}** üá∑üá∫\n"
        f"{translated_summary}\n\n"
        f"üîó [–û—Ä–∏–≥–∏–Ω–∞–ª]({news['link']})\n"
        f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}"
    )

    if yandex_link:
        message += f"\nüéß [–°–ª—É—à–∞—Ç—å {possible_artist} –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ]({yandex_link})"

    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode="Markdown")
        print(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {news['title']}")
    except TelegramError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")


# ---------- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ----------

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot = Bot(token=BOT_TOKEN)

    async def fetch_loop():
        while True:
            await fetch_news()
            await asyncio.sleep(FETCH_INTERVAL)

    async def post_loop():
        while True:
            await post_next_news(bot)
            await asyncio.sleep(POST_INTERVAL)

    await asyncio.gather(fetch_loop(), post_loop())


if __name__ == "__main__":
    asyncio.run(main())
